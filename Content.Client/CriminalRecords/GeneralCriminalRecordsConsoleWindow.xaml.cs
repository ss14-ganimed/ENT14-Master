using System.Linq;
using Content.Client.Message;
using Content.Shared.CriminalRecords;
using Content.Shared.Security;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.CriminalRecords;

[GenerateTypedNameReferences]
public sealed partial class GeneralCriminalRecordsConsoleWindow : DefaultWindow
{
    public Action<(NetEntity, uint)?>? OnKeySelected;
    public Action<GeneralStationRecordFilterType, string>? OnFiltersChanged;
    public Action<BaseButton.ButtonEventArgs, string?, string?>? OnArrestButtonPressed;
    public Action<BaseButton.ButtonEventArgs, string?, string?>? OnReleaseButtonPressed;
    public Action<BaseButton.ButtonEventArgs, string?, string?>? OnWantedButtonPressed;
    private bool _isPopulating;
    private string? _recordName;
    private GeneralStationRecordFilterType _currentFilterType;

    public GeneralCriminalRecordsConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        _currentFilterType = GeneralStationRecordFilterType.Name;

        foreach (var item in Enum.GetValues<GeneralStationRecordFilterType>())
        {
            StationRecordsFilterType.AddItem(GetTypeFilterLocals(item), (int)item);
        }

        RecordListing.OnItemSelected += args =>
        {
            if (_isPopulating || RecordListing[args.ItemIndex].Metadata is not ValueTuple<NetEntity, uint> cast)
            {
                return;
            }
            OnKeySelected?.Invoke(cast);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            if (!_isPopulating)
                OnKeySelected?.Invoke(null);
        };

        StationRecordsFilterType.OnItemSelected += eventArgs =>
        {
            var type = (GeneralStationRecordFilterType)eventArgs.Id;
            if (_currentFilterType != type)
            {
                _currentFilterType = type;
                FilterListingOfRecords();
            }
        };

        StationRecordsFiltersValue.OnTextEntered += args =>
        {
            FilterListingOfRecords(args.Text);
        };

        StationRecordsFilters.OnPressed += _ =>
        {
            FilterListingOfRecords(StationRecordsFiltersValue.Text);
        };

        StationRecordsFiltersReset.OnPressed += _ =>
        {
            StationRecordsFiltersValue.Text = "";
            FilterListingOfRecords();
        };

        ArrestButton.OnPressed += e => OnArrestButtonPressed?.Invoke(e, ReasonLineEdit.Text, _recordName);
		
		ReleaseButton.OnPressed += e => OnReleaseButtonPressed?.Invoke(e, ReasonLineEdit.Text, _recordName);
		
		WantedButton.OnPressed += e => OnWantedButtonPressed?.Invoke(e, ReasonLineEdit.Text, _recordName);

    }
	
	

    public void UpdateState(GeneralCriminalRecordsConsoleState state)
    {
        if (state.Filter != null)
        {
            if (state.Filter.Type != _currentFilterType)
            {
                _currentFilterType = state.Filter.Type;
            }

            if (state.Filter.Value != StationRecordsFiltersValue.Text)
            {
                StationRecordsFiltersValue.Text = state.Filter.Value;
            }
        }

        StationRecordsFilterType.SelectId((int)_currentFilterType);

        if (state.RecordListing == null)
        {
            RecordListingStatus.Visible = true;
            RecordListing.Visible = false;
            RecordListingStatus.Text = Loc.GetString("general-criminal-records-console-empty-state");
            RecordContainer.Visible = false;
            RecordContainerStatus.Visible = false;
            return;
        }

        RecordListingStatus.Visible = false;
        RecordListing.Visible = true;
        RecordContainer.Visible = true;

        PopulateRecordListing(state.RecordListing!, state.SelectedKey);

        RecordContainerStatus.Visible = state.CriminalRecord == null;

        ArrestButton.Text = state.CriminalRecord?.Status == SecurityStatus.Detained ? Loc.GetString("general-criminal-records-arrested-button") : Loc.GetString("general-criminal-records-arrest-button");
		ReleaseButton.Text = state.CriminalRecord?.Status == SecurityStatus.Detained ? Loc.GetString("general-criminal-records-release-button") : state.CriminalRecord?.Status == SecurityStatus.Wanted ? Loc.GetString("general-criminal-records-not-wanted-button") : Loc.GetString("general-criminal-records-none-button");
		WantedButton.Text = state.CriminalRecord?.Status == SecurityStatus.Wanted ? Loc.GetString("general-criminal-records-wanted-button") : Loc.GetString("general-criminal-records-set-wanted-button");
		
		
        ReasonLineEdit.Visible = state.SelectedKey != null;
        ArrestButton.Visible = state.SelectedKey != null;
        ReleaseButton.Visible = state.SelectedKey != null;
        WantedButton.Visible = state.SelectedKey != null;
        CriminalDivider.Visible = state.SelectedKey != null;

        if ((state.CriminalRecord != null) & (state.StationRecord != null))
        {
            ReasonLineEdit.Visible = state.SelectedKey != null;
            ArrestButton.Visible = state.SelectedKey != null;
            CriminalDivider.Visible = state.SelectedKey != null;
			ReleaseButton.Visible = state.SelectedKey != null;
			WantedButton.Visible = state.SelectedKey != null;

            ArrestButton.Disabled = state.CriminalRecord?.Status == SecurityStatus.Detained;
			
			WantedButton.Disabled = state.CriminalRecord?.Status == SecurityStatus.Wanted;
			
			ReleaseButton.Disabled = state.CriminalRecord?.Status == SecurityStatus.None;

            RecordContainerStatus.Visible = state.SelectedKey == null;
            RecordContainerStatus.Text = state.SelectedKey != null
                ? Loc.GetString("general-criminal-records-console-no-records-found")
                : Loc.GetString("general-criminal-records-console-select-records-info");
            _recordName = state.StationRecord?.Name;
            PopulateRecordContainer(state.StationRecord!, state.CriminalRecord!);
        }
        else
        {
            RecordContainer.DisposeAllChildren();
            RecordContainer.RemoveAllChildren();
        }
    }

    private void PopulateRecordListing(Dictionary<(NetEntity, uint), string> listing, (NetEntity, uint)? selected)
    {
        RecordListing.Clear();
        RecordListing.ClearSelected();

        _isPopulating = true;
        foreach (var (key, name) in listing)
        {
            var item = RecordListing.AddItem(name);
            item.Metadata = key;

            if (selected != null && key.Item1 == selected.Value.Item1 && key.Item2 == selected.Value.Item2)
            {
                item.Selected = true;
            }
        }
        _isPopulating = false;

        RecordListing.SortItemsByText();
    }
	
	private string GetStatusString(Enum status)
	{
		switch (status)
		{
			case SecurityStatus.Wanted: return "general-criminal-records-console-records-status-wanted";
			case SecurityStatus.Detained: return "general-criminal-records-console-records-status-detained";
			default: return "general-criminal-records-console-records-status-none";
		}
	}
	

    private void PopulateRecordContainer(GeneralStationRecord stationRecord, GeneralCriminalRecord criminalRecord)
    {
        RecordContainer.DisposeAllChildren();
        RecordContainer.RemoveAllChildren();
        // sure
        var status = new RichTextLabel() { };

        if (criminalRecord.Status == SecurityStatus.None)
        {
            status.SetMarkup(Loc.GetString("general-criminal-records-console-records-status", ("status",
                Loc.GetString(GetStatusString(criminalRecord.Status)))!));
        }
        else if (criminalRecord.Status == SecurityStatus.Wanted)
        {
            status.SetMarkup(Loc.GetString("general-criminal-records-console-records-status", ("status",
                $"[color=red]{Loc.GetString(GetStatusString(criminalRecord.Status))}[/color]")));
        }
        else if (criminalRecord.Status == SecurityStatus.Detained)
        {
            status.SetMarkup(Loc.GetString("general-criminal-records-console-records-status", ("status",
                $"[color=dodgerblue]{Loc.GetString(GetStatusString(criminalRecord.Status))}[/color]")));
        }


        var recordControls = new Control[]
        {
            new Label()
            {
                Text = stationRecord.Name,
                StyleClasses = { "LabelBig" }
            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-age", ("age", stationRecord.Age.ToString()))

            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-title", ("job", Loc.GetString(stationRecord.JobTitle)))
            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-species", ("species", stationRecord.Species))
            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-gender", ("gender", stationRecord.Gender.ToString()))
            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-fingerprint", ("fingerprint", stationRecord.Fingerprint ?? Loc.GetString("generic-not-available-shorthand")))
            },
            new Label()
            {
                Text = Loc.GetString("general-criminal-records-console-records-dna", ("dna", stationRecord.DNA ?? Loc.GetString("generic-not-available-shorthand")))
            },
            new PanelContainer()
            {
                StyleClasses = {"LowDivider"}, Margin = new Thickness(0, 5, 0, 5)
            },
            status
        };



        foreach (var control in recordControls)
        {
            RecordContainer.AddChild(control);
        }

        if (criminalRecord.Reason != string.Empty)
        {
            var label = new RichTextLabel() { };
            label.SetMessage(criminalRecord.Reason);
            RecordContainer.AddChild(label);
        }
    }

    private void FilterListingOfRecords(string text = "")
    {
        if (!_isPopulating)
        {
            OnFiltersChanged?.Invoke(_currentFilterType, text);
        }
    }

    private string GetTypeFilterLocals(GeneralStationRecordFilterType type)
    {
        return Loc.GetString($"general-criminal-records-{type.ToString().ToLower()}-filter");
    }
}