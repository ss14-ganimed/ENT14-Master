using System.Linq;
using System.Numerics;
using Content.Shared.LowDesert.Monster;
using Content.Shared.LowDesert.Monster.Components;
using Content.Client.Stylesheets;
using Content.Client.Message;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BoxContainer;


namespace Content.Client.LowDesert.Monster.Ui;

[GenerateTypedNameReferences]
public sealed partial class MonsterEvolutionMenu : DefaultWindow
{
	public event Action<BaseButton.ButtonEventArgs, MonsterEvolutionItemButton>? OnMonsterEvolutionItemButtonPressed;
	public event Action<BaseButton.ButtonEventArgs, Button>? OnMonsterEvolutionEvolveButtonPressed;
	
	private MonsterEvolutionScreen? _evolveWindow;
	
	public MonsterEvolutionMenu ()
	{
		RobustXamlLoader.Load(this);
		IoCManager.InjectDependencies(this);
	}
	
	public void UpdateState(BoundUserInterfaceState state)
	{
		
		var castState = (MonsterEvolutionBoundUserInterfaceState) state;
		
		Items.Children.Clear();
		
		var isFirst = true;
		
		foreach (var item in castState.Items)
		{
			if (!isFirst)
			{
				Items.AddChild(new Control { MinSize = new Vector2(0, 10) });
			}
			else
			{
				isFirst = false;
			}
			
			var nameLabel = new RichTextLabel();
			nameLabel.SetMarkup($"[bold]{ item.Name }[/bold]");
			
			var descLabel = new RichTextLabel();
			descLabel.SetMarkup($"[color=lightgray]{ item.Description }[/color]");
			
			var costLabel = new RichTextLabel();
			costLabel.SetMarkup(Loc.GetString("monster-evolution-cost", ("cost", item.Cost.ToString("f1"))));
			
			var button = new MonsterEvolutionItemButton(item);
			button.Text = Loc.GetString("monster-evolution-mutate");
			button.Disabled = castState.EvoPoints < item.Cost;
			button.OnPressed += args => OnMonsterEvolutionItemButtonPressed?.Invoke(args, button);
			
			var box = new BoxContainer
			{
                MinWidth = 250,
				MinHeight = 100,
                VerticalExpand = true,
				Orientation = LayoutOrientation.Vertical,
				Children =
                {
					nameLabel,
					descLabel,
					costLabel,
					button
				}
            };
			
			Items.AddChild(box);
			
		}
		
		Overview.Children.Clear();

		var overviewHeader = new RichTextLabel();
		overviewHeader.SetMarkup(Loc.GetString("monster-evolution-overview-header"));
		Overview.AddChild(overviewHeader);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 10) });
		
		var overviewClass = new RichTextLabel();
		overviewClass.SetMarkup(Loc.GetString("monster-evolution-overview-class", ("class", castState.Overview.Class)));
		Overview.AddChild(overviewClass);
		
		var overviewSpecies = new RichTextLabel();
		overviewSpecies.SetMarkup(Loc.GetString("monster-evolution-overview-species", ("species", castState.Overview.Species)));
		Overview.AddChild(overviewSpecies);
		
		var overviewName = new RichTextLabel();
		overviewName.SetMarkup(Loc.GetString("monster-evolution-overview-name", ("name", castState.Overview.Name)));
		Overview.AddChild(overviewName);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewEvoPoints = new RichTextLabel();
		overviewEvoPoints.SetMarkup(Loc.GetString("monster-evolution-overview-evopoints", ("points", castState.Overview.EvoPoints.ToString("f1"))));
		Overview.AddChild(overviewEvoPoints);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewHealth = new RichTextLabel();
		overviewHealth.SetMarkup(Loc.GetString("monster-evolution-overview-health", ("health", castState.Overview.Health.ToString("f1"))));
		Overview.AddChild(overviewHealth);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewAttackDamage = new RichTextLabel();
		overviewAttackDamage.SetMarkup(Loc.GetString("monster-evolution-overview-attackdamage", ("damage", castState.Overview.AttackDamage.ToString("f1"))));
		Overview.AddChild(overviewAttackDamage);
		
		var overviewAttackSpeed = new RichTextLabel();
		overviewAttackSpeed.SetMarkup(Loc.GetString("monster-evolution-overview-attackspeed", ("speed", castState.Overview.AttackSpeed.ToString("f1"))));
		Overview.AddChild(overviewAttackSpeed);
		
		var overviewAttackRange = new RichTextLabel();
		overviewAttackRange.SetMarkup(Loc.GetString("monster-evolution-overview-attackrange", ("range", castState.Overview.AttackRange.ToString("f1"))));
		Overview.AddChild(overviewAttackRange);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewWalkSpeed = new RichTextLabel();
		overviewWalkSpeed.SetMarkup(Loc.GetString("monster-evolution-overview-walkspeed", ("speed", castState.Overview.WalkSpeed.ToString("f1"))));
		Overview.AddChild(overviewWalkSpeed);
		
		var overviewRunSpeed = new RichTextLabel();
		overviewRunSpeed.SetMarkup(Loc.GetString("monster-evolution-overview-runspeed", ("speed", castState.Overview.RunSpeed.ToString("f1"))));
		Overview.AddChild(overviewRunSpeed);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewConsumeDamage = new RichTextLabel();
		overviewConsumeDamage.SetMarkup(Loc.GetString("monster-evolution-overview-consumedamage", ("damage", castState.Overview.ConsumeDamage.ToString("f1"))));
		Overview.AddChild(overviewConsumeDamage);
		
		var overviewConsumeTime = new RichTextLabel();
		overviewConsumeTime.SetMarkup(Loc.GetString("monster-evolution-overview-consumetime", ("time", castState.Overview.ConsumeTime.ToString("f1"))));
		Overview.AddChild(overviewConsumeTime);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewStaminaThreshold = new RichTextLabel();
		overviewStaminaThreshold.SetMarkup(Loc.GetString("monster-evolution-overview-staminathreshold", ("threshold", castState.Overview.StaminaThreshold.ToString("f1"))));
		Overview.AddChild(overviewStaminaThreshold);
		
		var overviewStaminaTime = new RichTextLabel();
		overviewStaminaTime.SetMarkup(Loc.GetString("monster-evolution-overview-staminatime", ("time", castState.Overview.StaminaTime.ToString("f1"))));
		Overview.AddChild(overviewStaminaTime);
		
		var overviewStaminaCooldown = new RichTextLabel();
		overviewStaminaCooldown.SetMarkup(Loc.GetString("monster-evolution-overview-staminacooldown", ("cooldown", castState.Overview.StaminaCooldown.ToString("f1"))));
		Overview.AddChild(overviewStaminaCooldown);
		
		var overviewStaminaReplenish = new RichTextLabel();
		overviewStaminaReplenish.SetMarkup(Loc.GetString("monster-evolution-overview-staminareplenish", ("replenish", castState.Overview.StaminaReplenish.ToString("f1"))));
		Overview.AddChild(overviewStaminaReplenish);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 10) });
		
		var evolveButton = new Button()
		{
			Text = Loc.GetString("monster-evolution-evolve"),
			ToolTip = Loc.GetString(
				castState.Overview.EvoPointsSpent >= castState.Overview.EvoPointsRequired ?
					"monster-evolution-tooltip-valid" 
					: "monster-evolution-tooltip-invalid"),
			Disabled = castState.Overview.EvoPointsSpent < castState.Overview.EvoPointsRequired,
			MinWidth = 300,
			MinHeight = 75,
		};
		
		evolveButton.OnPressed += _ => {
			
			if (_evolveWindow is null)
			{
				_evolveWindow = new MonsterEvolutionScreen();
				_evolveWindow.OnClose += Close;
				_evolveWindow.OpenToLeft();
			}
			else
			{
				if (_evolveWindow.IsOpen)
				{
					_evolveWindow.Close();
				}
				else
				{
					_evolveWindow.Open();
				}
			}
		};
		
		Overview.AddChild(evolveButton);
	}
	
	public sealed class MonsterEvolutionItemButton : Button 
	{
		
        public MonsterEvolutionItem Item { get; }
		
        public MonsterEvolutionItemButton(MonsterEvolutionItem item)
        {
            Item = item;
        }
    }
}