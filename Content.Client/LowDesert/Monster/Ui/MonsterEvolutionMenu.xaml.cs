using System.Linq;
using System.Numerics;
using Content.Shared.LowDesert.Monster;
using Content.Shared.LowDesert.Monster.Components;
using Content.Client.Stylesheets;
using Content.Client.Message;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BoxContainer;


namespace Content.Client.LowDesert.Monster.Ui;

[GenerateTypedNameReferences]
public sealed partial class MonsterEvolutionMenu : DefaultWindow
{
	public event Action<BaseButton.ButtonEventArgs, MonsterEvolutionItemButton>? OnMonsterEvolutionItemButtonPressed;
	
	public MonsterEvolutionMenu ()
	{
		RobustXamlLoader.Load(this);
		IoCManager.InjectDependencies(this);
	}
	
	public void UpdateState(BoundUserInterfaceState state)
	{
		
		var castState = (MonsterEvolutionBoundUserInterfaceState) state;
		
		Items.Children.Clear();
		
		var isFirst = true;
		
		foreach (var item in castState.Items)
		{
			if (!isFirst)
			{
				Items.AddChild(new Control { MinSize = new Vector2(0, 10) });
			}
			else
			{
				isFirst = false;
			}
			
			var nameLabel = new RichTextLabel();
			nameLabel.SetMarkup($"[bold]{ item.Name }[/bold]");
			
			var descLabel = new RichTextLabel();
			descLabel.SetMarkup($"[color=lightgray]{ item.Description }[/color]");
			
			var costLabel = new RichTextLabel();
			costLabel.SetMarkup(Loc.GetString("monster-evolution-cost", ("cost", item.Cost.ToString("f1"))));
			
			var button = new MonsterEvolutionItemButton(item);
			button.Text = Loc.GetString("monster-evolution-evolve");
			button.Disabled = castState.EvoPoints < item.Cost;
			button.OnPressed += args => OnMonsterEvolutionItemButtonPressed?.Invoke(args, button);
			
			var box = new BoxContainer
			{
                MinWidth = 250,
				MinHeight = 100,
                VerticalExpand = true,
				Orientation = LayoutOrientation.Vertical,
				Children =
                {
					nameLabel,
					descLabel,
					costLabel,
					button
				}
            };
			
			Items.AddChild(box);
			
		}
		
		Overview.Children.Clear();

		var overviewHeader = new RichTextLabel();
		overviewHeader.SetMarkup(Loc.GetString("monster-evolution-overview-header"));
		Overview.AddChild(overviewHeader);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 10) });
		
		var overviewName = new RichTextLabel();
		overviewName.SetMarkup(Loc.GetString("monster-evolution-overview-name", ("name", castState.Overview.Name)));
		Overview.AddChild(overviewName);
		
		Overview.AddChild(new Control { MinSize = new Vector2(0, 5) });
		
		var overviewHealth = new RichTextLabel();
		overviewHealth.SetMarkup(Loc.GetString("monster-evolution-overview-health", ("health", castState.Overview.Health.ToString("f1"))));
		Overview.AddChild(overviewHealth);
	}
	
	public sealed class MonsterEvolutionItemButton : Button 
	{
		
        public MonsterEvolutionItem Item { get; }
		
        public MonsterEvolutionItemButton(MonsterEvolutionItem item)
        {
            Item = item;
        }
    }
}